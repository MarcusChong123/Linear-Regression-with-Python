# -*- coding: utf-8 -*-
"""Linear Regression_T1.ipynb

Automatically generated by Colaboratory.

"""

# Commented out IPython magic to ensure Python compatibility.
# This line makes sure our chart is display inside the notebook
# matplotlib is a charting engine in Python
# %matplotlib inline

# Import numbers and analysis package into our workspace.
import pandas as pd
import numpy as np

# We use matplotlib to draw chart, and seaborn makes them pretty
import seaborn as sns
import matplotlib.pyplot as plt

# Run this line if you have a HD monitor
# %config InlineBackend.figure_format = 'retina'

# Initialize our chart engine
sns.set()

#Step 2: Import Data
from google.colab import files
uploaded = files.upload()

df = pd.read_csv("ads_revenue.csv", index_col=0)

# Step 3: Explore the data
df.head()

df.info()

# Step 4: Exploratory Data Analysis and Data Wrangling
obj_df = df.select_dtypes(include=['object']).copy()

from sklearn import preprocessing
lb_make = preprocessing.LabelEncoder()
for col in obj_df.columns.values:
  df[f'{col}_new'] = lb_make.fit_transform(df[f'{col}'])

df.head()

df.drop(['size', 'area'], 1, inplace=True)

df.info()

# visualize the relationship between the features and the response using scatterplots
fig, axs = plt.subplots(1, 3, sharey=True); #1 row 3 columns
df.plot(kind='scatter', x='Google', y='Revenue', ax=axs[0], figsize=(16, 8));
df.plot(kind='scatter', x='Facebook', y='Revenue', ax=axs[1]);
df.plot(kind='scatter', x='Instagram', y='Revenue', ax=axs[2]);

import statsmodels.formula.api as smf
lm = smf.ols(formula = 'Revenue ~ Google', data = df).fit()
lm.params

# y = mx + C
# y = 0.047537 * x + 7.032594
budget = 100
expected_sales = budget * 0.047537 + 7.032594
print("We expect Revenue of ",expected_sales * 1000, "units with ", 
      budget, "k budget")

# create a fitted model in one line
lm = smf.ols(formula='Revenue ~ Facebook', data=df).fit()

# print the coefficients
lm.params

# create a fitted model in one line
lm = smf.ols(formula='Revenue ~ Instagram', data=df).fit()

# print the coefficients
lm.params

# create a fitted model with all three features
lm = smf.ols(formula='Revenue ~ Google + Facebook + Instagram', data=df).fit()

# print the coefficients
lm.params

# create a fitted model with all Five features
lm = smf.ols(formula='Revenue ~ Google + Facebook + Instagram + size_new + area_new', data=df).fit()

# print the coefficients
lm.params

lm.summary()

# create a fitted model with all three features
lm = smf.ols(formula='Revenue ~ Google + Facebook', data=df).fit()

# print the coefficients
lm.params
lm.summary()

fb = 50
google = 50
predicted_sales = google * 0.0458 + fb * 0.1880 + 2.9211
print("We expect to sell ",predicted_sales * 1000, "units with ", 
      fb, "k fb budget,", google, "k google budget")

# Step 5: Train the model
feature_cols = ['Google', 'Facebook']
X = df[feature_cols]
y = df['Revenue']

from sklearn.linear_model import LinearRegression
clf = LinearRegression()
clf.fit(X, y)

print("Intercept", clf.intercept_)
print('Coefficient', clf.coef_)

clf.score(X,y)

# Step 6: Prediction
fb = 70
google = 70
prediction = clf.predict([[google,fb]])

print("We expect to sell ",prediction[0] * 1000, "units with ", 
      fb, "k fb budget,", google, "k google budget")
#we expect to sell  19283.53 units with  70 k google budget, 70 k facebook budget

